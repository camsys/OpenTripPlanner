schema {
    query: QueryType
}

"""Long type"""
scalar Long

"""JSON type"""
scalar JSON


"""
A feed provides routing data (stops, routes, timetables, etc.) from one or more public transport agencies.
"""
type Feed {

    """ID of the feed"""
    feedId: String!

    """Version of the feed"""
    feedVersion: String!

    """List of agencies which provide data to this feed"""
    agencies: [Agency]

    """List of routes contained in this feed"""
    routes: [Route]

    """List of stops included in this feed"""
    stops: [Stop]

}


"""Alert of a current or upcoming disruption in public transportation"""
type Alert {

    """hashcode from the original GTFS-RT alert"""
    alertHash: Int

    """The feed in which this alert was published"""
    feed: String

    """
    Agency affected by the disruption. Note that this value is present only if the
    disruption has an effect on all operations of the agency.
    """
    agency: Agency

    """Route affected by the disruption"""
    route: Route

   	"""Trip affected by the disruption"""
    trip: Trip
    
    """Stop affected by the disruption"""
    stop: Stop

    """Header of the alert, if available"""
    alertHeaderText: String

    """Header of the alert in all different available languages"""
    alertHeaderTextTranslations: String!

    """Long description of the alert"""
    alertDescriptionText: String!

    """Long descriptions of the alert in all different available languages"""
    alertDescriptionTextTranslations: String!

    """Url with more information"""
    alertUrl: String

    """Url with more information in all different available languages"""
    alertUrlTranslations: String!

    """Alert effect"""
    alertEffect: AlertEffectType

    """Alert cause"""
    alertCause: AlertCauseType

    """Alert severity level"""
    alertSeverityLevel: AlertSeverityLevelType

    """
    Time when this alert comes into effect. Format: Unix timestamp in seconds
    """
    effectiveStartDate: Long

    """
    Time when this alert is not in effect anymore. Format: Unix timestamp in seconds
    """
    effectiveEndDate: Long
}


"""Cause of a alert"""
enum AlertCauseType {
    """UNKNOWN_CAUSE"""
    UNKNOWN_CAUSE

    """OTHER_CAUSE"""
    OTHER_CAUSE

    """TECHNICAL_PROBLEM"""
    TECHNICAL_PROBLEM

    """STRIKE"""
    STRIKE

    """DEMONSTRATION"""
    DEMONSTRATION

    """ACCIDENT"""
    ACCIDENT

    """HOLIDAY"""
    HOLIDAY

    """WEATHER"""
    WEATHER

    """MAINTENANCE"""
    MAINTENANCE

    """CONSTRUCTION"""
    CONSTRUCTION

    """POLICE_ACTIVITY"""
    POLICE_ACTIVITY

    """MEDICAL_EMERGENCY"""
    MEDICAL_EMERGENCY
}

"""Effect of a alert"""
enum AlertEffectType {
    """NO_SERVICE"""
    NO_SERVICE

    """REDUCED_SERVICE"""
    REDUCED_SERVICE

    """SIGNIFICANT_DELAYS"""
    SIGNIFICANT_DELAYS

    """DETOUR"""
    DETOUR

    """ADDITIONAL_SERVICE"""
    ADDITIONAL_SERVICE

    """MODIFIED_SERVICE"""
    MODIFIED_SERVICE

    """OTHER_EFFECT"""
    OTHER_EFFECT

    """UNKNOWN_EFFECT"""
    UNKNOWN_EFFECT

    """STOP_MOVED"""
    STOP_MOVED

    """NO_EFFECT"""
    NO_EFFECT
}

"""Severity level of a alert"""
enum AlertSeverityLevelType {
    """Severity of alert is unknown"""
    UNKNOWN_SEVERITY

    """
    Info alerts are used for informational messages that should not have a
    significant effect on user's journey, for example: A single entrance to a
    metro station is temporarily closed.
    """
    INFO

    """
    Warning alerts are used when a single stop or route has a disruption that can
    affect user's journey, for example: All trams on a specific route are running
    with irregular schedules.
    """
    WARNING

    """
    Severe alerts are used when a significant part of public transport services is
    affected, for example: All train services are cancelled due to technical problems.
    """
    SEVERE
}


"""
Route represents a public transportation service, usually from point A to point
B and *back*, shown to customers under a single name, e.g. bus M60. Routes
contain patterns (see field `patterns`), which describe different variants of
the route, e.g. outbound pattern from point A to point B and inbound pattern
from point B to point A.
"""
type Route {
 
    """ID of the route in format `FeedId_RouteId`"""
    gtfsId: String!

    """Agency operating the route"""
    agency: Agency

    """Short name of the route, usually a line number, e.g. M60"""
    shortName: String

    """Long name of the route, e.g. 7th Avenue Express"""
    longName: String

    """
    The raw GTFS route type as a integer. For the list of possible values, see:
    https://developers.google.com/transit/gtfs/reference/#routestxt and
    https://developers.google.com/transit/gtfs/reference/extended-route-types
    """
    type: Int

    desc: String

    url: String

    """
    The color (in hexadecimal format) the agency operating this route would prefer
    to use on UI elements (e.g. polylines on a map) related to this route. This
    value is not available for most routes.
    """
    color: String

    """
    The color (in hexadecimal format) the agency operating this route would prefer
    to use when displaying text related to this route. This value is not available
    for most routes.
    """
    textColor: String

    """List of stops on this route"""
    stops: [Stop]

    """List of trips on this route"""
    trips: [Trip]

    """List of alerts which have an effect on the route"""
    alerts: [Alert]
}

"""Accessibility information from GTFS."""
enum WheelchairBoarding {
    """There is no accessibility information for the stop."""
    NO_INFORMATION

    """
    At least some vehicles at this stop can be boarded by a rider in a wheelchair.
    """
    POSSIBLE

    """Wheelchair boarding is not possible at this stop."""
    NOT_POSSIBLE
}

"""Enhanced accessibility information set by NY MTA's Accessibility Group."""
enum NYMtaADAFlag {	
	"""Wheelchair boarding is not possible at this stop."""
	NOT_ACCESSIBLE

	"""Wheelchair boarding is possible at all platforms at this stop."""
	ACCESSIBLE

	"""Wheelchair boarding is possible at some platforms at this stop; see notes"""
	PARTLY_ACCESSIBLE
}	

"""Identifies whether this stop represents a stop or station."""
enum LocationType {
    """A location where passengers board or disembark from a transit vehicle."""
    STOP

    """A physical structure or area that contains one or more stops."""
    STATION

    """A station entrance/exit"""    
    ENTRANCE_EXIT

    """A generic node"""    
    GENERIC_NODE

    """A boarding area"""    
    BOARDING_AREA
}

enum BikesAllowed {
    """There is no bike information for the trip."""
    NO_INFORMATION

    """The vehicle being used on this particular trip can accommodate at least one bicycle."""
    ALLOWED

    """No bicycles are allowed on this trip."""    
    NOT_ALLOWED
}

"""
Stop can represent either a single public transport stop, where passengers can
board and/or disembark vehicles, or a station, which contains multiple stops.
See field `locationType`.
"""
type Stop {

    """ÃŒD of the station/stop in format `FeedId_StopId`"""
    gtfsId: String!

    """NY MTA Complex ID (a complex is one or more stations)"""
    mtaComplexId: String

    """NY MTA Station ID (a station is one or more GTFS stations, which are in turn made up of one or more platforms (stops in GTFS))"""
    mtaStationId: String

    """NY MTA Equipment at this location"""
    mtaEquipment: [Equipment]

    """NY MTA's ADA Accessibility Status Flag"""
    mtaAdaAccessible: String!

    """NY MTA's ADA Accessibility Description"""
    mtaAdaAccessibleNotes: String

    """Name of the stop, e.g. 14th St - Union Square"""
    name: String!

    """Latitude of the stop (WGS 84)"""
    lat: Float

    """Longitude of the stop (WGS 84)"""
    lon: Float

    """Stop code which is visible at the stop"""
    code: String

    """Description of the stop, usually a street name"""
    desc: String

    """ID of the zone where this stop is located"""
    zoneId: String
    url: String

    """Identifies whether this stop represents a stop or station."""
    locationType: String!

    """
    The GTFS station which this stop is part of (or null if this stop is not part of a station). 
    """
    parentStation: Stop

    """
    Whether wheelchair boarding is possible for at least some of vehicles on this stop
    """
    wheelchairBoarding: String!

    direction: String

    timezone: String

    """
    The raw GTFS route type used by routes which pass through this stop. For the
    list of possible values, see:
    https://developers.google.com/transit/gtfs/reference/#routestxt and
    https://developers.google.com/transit/gtfs/reference/extended-route-types
    """
    vehicleType: Int

    """
    Identifier of the platform, usually a number. This value is only present for stops that are part of a station
    """
    platformCode: String

    """
    Returns all stops that are children of this station (Only applicable for stations, and only returns GTFS children. See also: stopsForMtaComplex)
    """
    stops: [Stop]

    """
    Returns all stops that are children of this complex
    """
	stopsForMtaComplex: [Stop]

    """Routes which pass through this stop"""
    routes: [Route!]

    """Routes which pass through this MTA complex"""
    routesForMtaComplex: [Route!]

    """Trips which pass through this stop, filtered to only include connections the MTA publishes as transfers. Note 1: null implies that no preferred transfers are available, while an an empty list means no published transfers are at the stop. Note 2: For LIRR: the stop used to query nearby is used as the 'required stop' for determining transfer preference. """
    preferredTransfers: [Trip!]

    """List of alerts which have an effect on this stop"""
    alerts: [Alert]
}

"""
Trip is a specific occurance of a pattern, usually identified by route, direction on the route and exact departure time.
"""
type Trip {

    """ID of the trip in format `FeedId_TripId`"""
    gtfsId: String!

    serviceId: String

	route: Route

    tripShortName: String

    """Headsign of the vehicle when running on this trip"""
    tripHeadsign: String

    """
    Short name of the route this trip is running. See field `shortName` of Route.
    """
    routeShortName: String

    """
    Direction code of the trip, i.e. is this the outbound or inbound trip of a
    pattern. Possible values: 0, 1 or `null` if the direction is irrelevant, i.e.
    the pattern has trips only in one direction.
    """
    directionId: String

    """
    Whether wheelchair boarding is possible for at least some of vehicles on this stop
    """
	wheelchairAccessible: String

	bikesAllowed: String

    blockId: String

    shapeId: String

    """List of times when this trip arrives to or departs from a stop"""
    stoptimes: [Stoptime]
    
    """
    List of alerts which have an effect on all operations of the agency
    """
    alerts: [Alert]
}


"""
Stoptime represents the time when a specific trip arrives to or departs from a specific stop.
"""
type Stoptime {

    """The stop where this arrival/departure happens"""
    stop: Stop

    """
    Scheduled arrival time. Format: seconds since midnight of the departure date
    """
    scheduledArrival: Int

    """
    Scheduled departure time. Format: seconds since midnight of the departure date
    """
    scheduledDeparture: Int

}


"""Station equipment such as an escalator or elevator."""
type Equipment {

    """NY MTA Equipment ID"""
    mtaEquipmentId: String

    """Whether this equipment is currently in service and accessible"""
    isCurrentlyAccessible: Boolean

    """
    List of alerts which have an effect on all operations of the agency
    """
    alerts: [Alert]
}

"""A public transport agency"""
type Agency {

    """Agency feed and id"""
    gtfsId: String!

    """Name of the agency"""
    name: String!

    """URL to the home page of the agency"""
    url: String

    """ID of the time zone which this agency operates on"""
    timezone: String

    lang: String

    """Phone number which customers can use to contact this agency"""
    phone: String

    """URL to a web page which has information of fares used by this agency"""
    fareUrl: String

    """List of routes operated by this agency"""
    routes: [Route]

    """
    List of alerts which have an effect on all operations of the agency
    """
    alerts: [Alert]
    
    """NY MTA Equipment"""
    mtaEquipment: [Equipment]

}

type AccessibleResultPair {
	
	from: Stop

	to: Stop
		
	dependsOnEquipment: [String]

	isCurrentlyAccessible: Boolean

    """
    List of alerts which have an effect on all operations of the agency
    """
    alerts: [Alert]
}

type AccessibleResult {
	
	pairs: [AccessibleResultPair]
	
    """NY MTA's ADA Accessibility Status Flag"""
    mtaAdaAccessible: String!

    """NY MTA's ADA Accessibility Description"""
    mtaAdaAccessibleNotes: String
    
}
    
type NearbyStopResult {

	""" 
	The stop data in this group is for. You'll get more than one "stop" (platform) if you provide a station.
	"""
	stop: [Stop]

    """
    Stop times grouped by route and destination (headsign)
    """
    routeDestinations: [RouteDestinationGroup]
}
    
type RouteDestinationGroup {

	""" 
	The route data in this group is for.
	"""
	route: Route
    
	""" 
	The headsign for vehicles serving trips that serve this group.
	"""
	headsign: String
    
    """ 
    Stop time containing scheduled and realtime data for vehicles serving trips serving this stop.
    """
    stopTimes: [RouteDestinationGroupStopTime]
}       
    
type RouteDestinationGroupStopTime {

    """
    Index of this stop in the trip
    """
    stopIndex: Int
    
    """
	Total number of stops in the trip
    """
    stopCount: Int

    """
	Scheduled arrival time
    """
    scheduledArrival: Long

    """
	Scheduled departure time
    """
    scheduledDeparture: Long

    """
	Realtime arrival time, if realtime=true
    """
    realtimeArrival: Long

    """
	Realtime departure time, if realtime=true
    """
    realtimeDeparture: Long

    """
	Realtime arrival delay on the trip, in seconds, if realtime=true
    """
    arrivalDelay: Int

    """
	Realtime departure delay on the trip, in seconds, if realtime=true
    """
    departureDelay: Int

	"""
	Whether this stop is marked as a timepoint in GTFS
	"""
    timepoint: Boolean

	"""
	true if there is realtime data for this arrival/departure; otherwise false.
	"""
    realtime: Boolean 

	"""
 	Trip of arrival/departure
 	"""
    tripId: String

	"""
	Track number, if available
 	"""
    track: String

	"""
	Peak/off-peak status
 	"""
    peakOffpeak: Int

	"""
	VehicleInfo for trip (if in realtime). Note: this is a JSON blob because the format can change based on MTA extensions, so assume the same format over time with caution. 
 	"""
    vehicleInfo: JSON

	"""
	Onward stops on this trip which this vehicle will make. 	
	"""
    stopsForTrip: [Stop]

	"""
	Realtime sign text, if given in data
 	"""
    realtimeSignText: String

}
    
type ScheduleResult {
	
	"""
	Number of transfers in this itinerary
    """
	transfers: Int
	
	"""
	Total duration of this itinerary in seconds
    """
	durationSeconds: Int
	
	"""
    Legs in this itinerary
    """
	legs: [ScheduleResultLeg]

}

type ScheduleResultLeg {
	
	"""
 	Headsign to be displayed by the train serving this leg
    """
	headsign: String


	"""
	Route name of the train serving this leg
    """
	routeLongName: String

    """
    Route ID of the train serving this leg
    """
    routeId: String

	"""
	From station name
    """
	from: String

	"""
    Departure time. Format: Unix timestamp in seconds
    """
	departTime: Long

	"""
    Departure time. Format: ISO date
    """
	departTimeString: String

	"""
	To station name
    """
	to: String
	
	"""
    Arrival time. Format: Unix timestamp in seconds
    """
	arriveTime: Long

	"""
    Arrival time. Format: ISO date
    """
	arriveTimeString: String

    """
    Run Date is the service date of the trip Format: ISO date
    """
    runDate: String

    """
    Trip short name
    """
    tripShortName: String

    """
    Trip id
    """
    tripId: String

    """
    Direction
    """
    direction: String

    """
    Destination is the final stop of the trip
    """
    destination: String

    """
    Board Time
    """
    boardTime: String

    """
    Alight Time
    """
    alightTime: String

    """
    Peak
    """
    peak: Int

}
    
type KeyValueMap {
    data: [KeyValueEntry]
}

type KeyValueEntry {
    key: String
    value: String
}    
    
type QueryType {

    """Get all feeds"""
    feeds: [Feed]

    """
    Get a single feed based on feed ID
    """
    feed(id: String!): Feed


    """Get all agencies"""
    agencies: [Agency]


    """
    Get a single agency based on agency ID, i.e. value of field `gtfsId` (ID format is `FeedId_StopId`)
    """
    agency(id: String!): Agency

    
    """
    Get a stop based on its GTFS ID (format: `FeedId_StopId`), station or complex ID.
    """
    stop(
        """
        GTFS Stop ID (format: `FeedId_StopId`)
        """
        gtfsId: String
            
    ): Stop

    """
    Get a stop based on its GTFS ID (format: `FeedId_StopId`), station or complex ID.
    """
    stops(
    
        """
        Only return stops with these ids. (format: `FeedId_StopId`)
        """
        gtfsIds: [String]
    
        """
        MTA Complex ID
        """
        mtaComplexId: String

        """
        MTA Station ID
        """
        mtaStationId: String   
         
    ): [Stop]
    
    
    """Get all active alerts"""
    alerts(

        """Only return alerts in these feeds"""
        feeds: [String!]

    ): [Alert]
    
    
    """Get all routes"""
    routes(

        """Only return routes with these ids"""
        gtfsIds: [String]

        """Query routes by this name"""
        name: String

    ): [Route]


    """
    Get a single route based on its ID, i.e. value of field `gtfsId` (format is `FeedId_RouteId`)
    """
    route(gtfsId: String!): Route
    

    """Get all trips"""
    trips(
        """Only return trips with these feedIds"""
        feeds: [String]
    ): [Trip]

    """
    Get a single trip based on its ID, i.e. value of field `gtfsId` (format is `FeedId:TripId`)
    """
    trip(gtfsId: String!): Trip
    

	""" 
	Shows all accessible stop pairs for the given stop/station/complex
	"""
	accessibility(

        """
        Date of schedule in format YYYY-MM-DD. Default value: current date
        """
        date: String

        """
        Whether to use current real-time accessibility information
        """
        includeRealtime: Boolean
        
        """
        GTFS Stop ID (format: `FeedId_StopId`)
        """
        gtfsId: String

        """
        MTA Complex ID
        """
        mtaComplexId: String

        """
        MTA Station ID
        """
        mtaStationId: String
        
	): AccessibleResult
	
	
	""" 
	Shows all upcoming departures to a given station, from a given station, at a given time
	
	"""
	schedule(
        """
        GTFS Stop ID (format: `FeedId_StopId`)
        """
		fromGtfsId: String
		
        """
        GTFS Stop ID (format: `FeedId_StopId`)
        """
		toGtfsId: String	
		
		"""
     	Time to return departure times for. Will default to the current time.
     	"""
     	time: String	

		"""
     	Number of results. Defaults to 10.
     	"""
     	maxResults: Int

	): [ScheduleResult]
	
	
	nearby(
	
    	"""
    	Latitude of origin of search. Either origin, list of stops, or both must be supplied.
		"""
	    latitude: Float
	    
		"""
    	Longitude of origin of search. Either origin, list of stops, or both must be supplied.
		"""
		longitude: Float

    	"""
     	Maximum walking distance, in meters, that the search will use to find stops.
		"""
		radius: Float

    	"""
        List of stops of interest. Should be a comma-separated list in the format MTA:101001,MNR:1, etc. Ignored if lat, lon, and radius are given; required otherwise.
        """
	    gtfsStopIdList: String

     	"""
     	Maximum number of stops to return if lat, lon, and radius are given; Ignored if stops are given
     	"""
		maxStops: Int = 100

    	"""
     	Minimum number of stops to return if lat, lon, and radius are given. Will search past radius to find stops.
 		"""
 		minStops: Int = 1

		"""
     	List of routes of interest. Should be in the format MTASBWY__A,MNR__1, etc. Optional.
     	"""
     	routesList: String

		"""
     	Direction of interest. Optional. Use GTFS direction_id (1 or 0).
     	"""
     	direction: Int

		"""
     	Date to return arrival/departure times for. Will default to the current date.
     	"""
     	date: String

		"""
     	Time to return arrival/departure times for. Will default to the current time.
     	"""
     	time: String

		"""	
     	Range, in seconds, from given time, in which to return arrival/departure results. Defaults to 1800.
     	"""
		timeRange: Int = 1800

		"""	
		Maximum number of departures to return per TripPattern, per stop. Defaults to 3.     	
		"""
		numberOfDepartures: Int = 3

		"""	
		If true, omit non-pickups, i.e. arrival/departures where the vehicle does not pick up passengers. Defaults to false.
		"""
		omitNonPickups: Boolean = false

		"""	
		If given, tripHeadsign to return arrival/departure time for.
		"""
		tripHeadsign: String

		"""	
		If given, only include trips that visit this stop
		"""
		stoppingAtGtfsStopId: String

		"""	
		If true, group arrivals/departures by parent stop (station), instead of by stop. Defaults to true.
		"""
		groupByParent: Boolean = true

		"""	
		Include cancelled trips in the output. Defaults to false.
		"""
		showCancelledTrips: Boolean = false

		"""	
		Add all stops for a given trip to the output. Defaults to false.
		"""
		includeStopsForTrip: Boolean = false

		"""	
		A list of tracks for which to display arrivals, e.g. "1" or "1,2". Default to all tracks.
		"""
		tracksList: String
		
		"""	
		Sets API to a mode for digital signage features. This removes results that are not in real-time. Defaults to false.
		"""
		signMode: Boolean = false	
	
	): [NearbyStopResult]
            
 }